<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Text2Sql.Net</name>
    </assembly>
    <members>
        <member name="P:Text2Sql.Net.Options.Text2SqlConnectionOption.DbType">
            <summary>
            sqlite连接字符串
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Options.Text2SqlConnectionOption.DBConnection">
            <summary>
            业务数据链接字符串
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Options.Text2SqlConnectionOption.VectorConnection">
            <summary>
            向量数据连接字符串
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Options.Text2SqlConnectionOption.VectorSize">
            <summary>
            向量数据维度，PG需要设置
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IAdvancedPromptService">
            <summary>
            高级Prompt工程服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IAdvancedPromptService.CreateProgressivePromptAsync(System.String,System.String,System.String,Text2Sql.Net.Domain.Service.UserProfile)">
            <summary>
            创建渐进式复杂度的Few-shot Prompt
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <param name="dbType">数据库类型</param>
            <param name="userProfile">用户画像（可选）</param>
            <returns>优化后的Prompt</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IChatService">
            <summary>
            聊天服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IChatService.GetChatHistoryAsync(System.String)">
            <summary>
            获取指定数据库连接的聊天历史
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>聊天历史列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IChatService.SaveChatMessageAsync(Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage)">
            <summary>
            保存聊天消息
            </summary>
            <param name="message">聊天消息</param>
            <returns>保存结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IChatService.GenerateAndExecuteSqlAsync(System.String,System.String)">
            <summary>
            生成并执行SQL
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <returns>AI响应（包含生成的SQL和执行结果）</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IChatService.OptimizeSqlAndExecuteAsync(System.String,System.String,System.String,System.String)">
            <summary>
            优化SQL并执行
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <param name="originalSql">原始SQL</param>
            <param name="errorMessage">错误信息</param>
            <returns>AI响应（包含优化后的SQL和执行结果）</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IConversationStateManager">
            <summary>
            对话状态管理器接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.UpdateContextAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            更新对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <param name="assistantMessage">助手回复</param>
            <param name="sql">生成的SQL</param>
            <param name="result">执行结果</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.ResolveCoreferencesAsync(System.String,System.String)">
            <summary>
            解析代词和省略引用
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <returns>解析后的消息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.AnalyzeFollowupQueryAsync(System.String,System.String)">
            <summary>
            分析后续查询类型
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <returns>查询类型</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.ProcessIncrementalQueryAsync(System.String,System.String,Text2Sql.Net.Domain.Service.FollowupQueryType)">
            <summary>
            处理增量查询
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <param name="queryType">查询类型</param>
            <returns>处理后的查询消息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.GetContextAsync(System.String)">
            <summary>
            获取对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>对话上下文</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IConversationStateManager.ClearContextAsync(System.String)">
            <summary>
            清理对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IExecutionFeedbackOptimizer">
            <summary>
            执行反馈优化器接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IExecutionFeedbackOptimizer.OptimizeWithFeedbackAsync(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            基于执行反馈进行迭代优化
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <param name="initialSql">初始SQL</param>
            <param name="maxIterations">最大迭代次数</param>
            <returns>优化结果</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IIntelligentSchemaLinkingService">
            <summary>
            智能Schema Linking服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IIntelligentSchemaLinkingService.GetRelevantSchemaAsync(System.String,System.String,System.Double,System.Int32)">
            <summary>
            获取与用户查询相关的Schema信息
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户查询</param>
            <param name="relevanceThreshold">相关性阈值</param>
            <param name="maxTables">最多返回表数量</param>
            <returns>相关Schema信息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IIntelligentSchemaLinkingService.BuildSchemaGraphAsync(System.String)">
            <summary>
            构建Schema图结构
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>Schema图</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService">
            <summary>
            监控与评估服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.EvaluateQueryQualityAsync(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估查询质量
            </summary>
            <param name="evaluationRequest">评估请求</param>
            <returns>评估结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.RecordQueryMetricAsync(Text2Sql.Net.Domain.Service.QueryExecutionMetric)">
            <summary>
            记录查询执行指标
            </summary>
            <param name="queryMetric">查询指标</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.RecordUserBehaviorAsync(Text2Sql.Net.Domain.Service.UserBehavior)">
            <summary>
            记录用户行为
            </summary>
            <param name="userBehavior">用户行为</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.GetSystemPerformanceReportAsync(Text2Sql.Net.Domain.Service.TimeRange)">
            <summary>
            获取系统性能报告
            </summary>
            <param name="timeRange">时间范围</param>
            <returns>性能报告</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.GetUserBehaviorReportAsync(Text2Sql.Net.Domain.Service.TimeRange)">
            <summary>
            获取用户行为分析报告
            </summary>
            <param name="timeRange">时间范围</param>
            <returns>用户行为报告</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IMonitoringAndEvaluationService.CleanupExpiredDataAsync">
            <summary>
            清理过期数据
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService">
            <summary>
            性能优化服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.GetCachedResultAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},Text2Sql.Net.Domain.Service.CachePolicy)">
            <summary>
            智能缓存查询结果
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="queryFunc">查询函数</param>
            <param name="cachePolicy">缓存策略</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.AnalyzeQueryComplexityAsync(System.String,System.String)">
            <summary>
            分析查询复杂度
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>复杂度分析结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.ProcessInParallelAsync``1(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task{``0}}},System.Int32)">
            <summary>
            并行处理多个查询任务
            </summary>
            <param name="tasks">任务列表</param>
            <param name="maxParallelism">最大并行度</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.GetQueryMetricsAsync(System.String)">
            <summary>
            获取查询性能指标
            </summary>
            <param name="queryId">查询ID</param>
            <returns>性能指标</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.UpdateQueryMetricsAsync(System.String,System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            更新查询性能指标
            </summary>
            <param name="queryId">查询ID</param>
            <param name="executionTime">执行时间</param>
            <param name="resultSize">结果大小</param>
            <param name="cacheHit">是否命中缓存</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.CleanupExpiredCacheAsync">
            <summary>
            清理过期缓存
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.IPerformanceOptimizationService.GenerateCacheKey(System.String,System.Object[])">
            <summary>
            生成缓存键
            </summary>
            <param name="prefix">前缀</param>
            <param name="parameters">参数</param>
            <returns>缓存键</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.ISchemaTrainingService">
            <summary>
            数据库Schema训练服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.ISchemaTrainingService.TrainDatabaseSchemaAsync(System.String)">
            <summary>
            训练数据库Schema（全部表）
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>训练结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.ISchemaTrainingService.TrainDatabaseSchemaAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            训练数据库Schema（选择的表）
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="tableNames">要训练的表名列表</param>
            <returns>训练结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.ISchemaTrainingService.GetDatabaseTablesAsync(System.String)">
            <summary>
            获取数据库表列表
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>表信息列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.ISchemaTrainingService.GetDatabaseSchemaAsync(System.String)">
            <summary>
            获取数据库Schema
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>Schema信息</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Interface.ISqlExecutionService">
            <summary>
            SQL执行服务接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Interface.ISqlExecutionService.ExecuteQueryAsync(System.String,System.String)">
            <summary>
            执行SQL查询
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="sqlQuery">SQL查询语句</param>
            <returns>查询结果和可能的错误信息</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Model.DatabaseTypeEnum">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Domain.Model.DatabaseTypeEnum.SQLServer">
            <summary>
            SQL Server 数据库
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Domain.Model.DatabaseTypeEnum.MySQL">
            <summary>
            MySQL 数据库
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Domain.Model.DatabaseTypeEnum.PostgreSQL">
            <summary>
            PostgreSQL 数据库
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Domain.Model.DatabaseTypeEnum.SQLite">
            <summary>
            SQLite 数据库
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Domain.Model.DatabaseTypeEnum.Excel">
            <summary>
            Excel 文件（导入为本地 SQLite 后使用）
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.AdvancedPromptService">
            <summary>
            高级Prompt工程服务
            实现Few-shot Learning、链式思考和个性化Prompt生成
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.CreateProgressivePromptAsync(System.String,System.String,System.String,Text2Sql.Net.Domain.Service.UserProfile)">
            <summary>
            创建渐进式复杂度的Few-shot Prompt
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <param name="dbType">数据库类型</param>
            <param name="userProfile">用户画像（可选）</param>
            <returns>优化后的Prompt</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.SelectBestExamplesAsync(System.String,System.String,System.Int32)">
            <summary>
            基于相似度选择最佳示例
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <param name="k">返回示例数量</param>
            <returns>最佳示例列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.GenerateReasoningChainAsync(System.String,System.String)">
            <summary>
            生成链式思考推理链
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>推理链</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.BuildProgressivePrompt(System.String,System.String,System.String,System.Collections.Generic.List{Text2Sql.Net.Domain.Service.QueryExample},Text2Sql.Net.Domain.Service.ChainOfThoughtSteps,Text2Sql.Net.Domain.Service.UserProfile)">
            <summary>
            构建渐进式复杂度Prompt
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.CreateBasicPrompt(System.String,System.String,System.String)">
            <summary>
            创建基础Prompt（后备方案）
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.AnalyzeIntent(System.String)">
            <summary>
            分析查询意图
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.ExtractEntities(System.String,System.String)">
            <summary>
            提取关键实体
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.SelectRelevantTables(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            选择相关表
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.AnalyzeTableRelationships(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            分析表关系
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.PlanSqlStructure(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            规划SQL结构
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.CalculateTextSimilarity(System.String,System.String)">
            <summary>
            计算文本相似度（简单实现）
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.CalculateSchemaSimilarity(System.String,System.String)">
            <summary>
            计算Schema相似度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.IsStopWord(System.String)">
            <summary>
            判断是否为停用词
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.AdvancedPromptService.InitializeExamplePool">
            <summary>
            初始化示例池
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryExample">
            <summary>
            查询示例
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ChainOfThoughtSteps">
            <summary>
            链式思考步骤
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.UserProfile">
            <summary>
            用户画像
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ChatService">
            <summary>
            聊天服务实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.#ctor(Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.IDatabaseConnectionConfigRepository,Text2Sql.Net.Repositories.Text2Sql.ChatHistory.IChatMessageRepository,Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.IDatabaseSchemaRepository,Text2Sql.Net.Domain.Interface.ISqlExecutionService,Text2Sql.Net.Domain.Interface.ISemanticService,Text2Sql.Net.Domain.Interface.IIntelligentSchemaLinkingService,Text2Sql.Net.Domain.Interface.IAdvancedPromptService,Text2Sql.Net.Domain.Interface.IExecutionFeedbackOptimizer,Text2Sql.Net.Domain.Interface.IConversationStateManager,Microsoft.SemanticKernel.Kernel,Microsoft.Extensions.Logging.ILogger{Text2Sql.Net.Domain.Service.ChatService})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.GetChatHistoryAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.SaveChatMessageAsync(Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.GenerateAndExecuteSqlAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.OptimizeSqlAndExecuteAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.GetRelevantSchemaInfoAsync(System.String,System.String)">
            <summary>
            获取与用户问题相关的数据库Schema信息
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户问题</param>
            <returns>相关Schema信息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.InferRelatedTables(System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo},System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo})">
            <summary>
            推断并添加与已找到表相关联的表
            </summary>
            <param name="sourceTables">已找到的相关表</param>
            <param name="allTables">所有表列表</param>
            <returns>包含关联表的扩展列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.GenerateSqlWithAdvancedPromptAsync(System.String)">
            <summary>
            使用高级Prompt生成SQL查询
            </summary>
            <param name="optimizedPrompt">优化后的Prompt</param>
            <returns>生成的SQL查询</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.GenerateSqlQueryAsync(System.String,System.String,System.String)">
            <summary>
            根据用户问题和Schema信息生成SQL查询（兼容旧版本）
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="userMessage">用户问题</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>生成的SQL查询</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.OptimizeSqlQueryAsync(System.String,System.String,System.String,System.String)">
            <summary>
            优化SQL查询
            </summary>
            <param name="userMessage">用户问题</param>
            <param name="originalSql">原始SQL</param>
            <param name="errorMessage">错误信息</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>优化后的SQL</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.CleanSqlResult(System.String)">
            <summary>
            清理SQL查询结果字符串
            </summary>
            <param name="sql">原始SQL字符串</param>
            <returns>清理后的SQL字符串</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ChatService.CreateErrorResponse(System.String,System.String)">
            <summary>
            创建错误响应消息
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="errorMessage">错误信息</param>
            <returns>错误响应消息</returns>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ConversationStateManager">
            <summary>
            对话状态管理器
            处理多轮对话和上下文理解
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.UpdateContextAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            更新对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <param name="assistantMessage">助手回复</param>
            <param name="sql">生成的SQL</param>
            <param name="result">执行结果</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ResolveCoreferencesAsync(System.String,System.String)">
            <summary>
            解析代词和省略引用
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <returns>解析后的消息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.AnalyzeFollowupQueryAsync(System.String,System.String)">
            <summary>
            分析后续查询类型
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <returns>查询类型</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessIncrementalQueryAsync(System.String,System.String,Text2Sql.Net.Domain.Service.FollowupQueryType)">
            <summary>
            处理增量查询
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户消息</param>
            <param name="queryType">查询类型</param>
            <returns>处理后的查询消息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.GetContextAsync(System.String)">
            <summary>
            获取对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>对话上下文</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ClearContextAsync(System.String)">
            <summary>
            清理对话上下文
            </summary>
            <param name="connectionId">数据库连接ID</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.SummarizeResult(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            总结查询结果
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ExtractEntities(System.String)">
            <summary>
            提取实体
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.UpdateActiveFilters(Text2Sql.Net.Domain.Service.ConversationContext,System.String,System.String)">
            <summary>
            更新活跃过滤条件
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ResolvePronouns(System.String,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            解析代词
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.FindRecentEntity(Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            查找最近的实体
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.IsIncompleteQuery(System.String)">
            <summary>
            判断是否为不完整查询
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.AddImplicitContext(System.String,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            添加隐式上下文
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ResolveRelativeTimeReferences(System.String,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            解析相对时间引用
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ResolveContextualQueries(System.String,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            解析上下文相关查询
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsFilterWords(System.String)">
            <summary>
            检查是否包含过滤词汇
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsAggregationWords(System.String)">
            <summary>
            检查是否包含聚合词汇
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsColumnExpansionWords(System.String)">
            <summary>
            检查是否包含列扩展词汇
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsSortingWords(System.String)">
            <summary>
            检查是否包含排序词汇
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsPronouns(System.String)">
            <summary>
            检查是否包含代词
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsComparisonWords(System.String)">
            <summary>
            检查是否包含比较词汇
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ContainsTableReference(System.String)">
            <summary>
            检查是否包含表引用
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ExtractTableContext(System.String)">
            <summary>
            提取表上下文
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessFilterRefinement(System.String,Text2Sql.Net.Domain.Service.ConversationTurn,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            处理过滤精化
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessAggregationChange(System.String,Text2Sql.Net.Domain.Service.ConversationTurn,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            处理聚合变更
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessColumnExpansion(System.String,Text2Sql.Net.Domain.Service.ConversationTurn,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            处理列扩展
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessSortingChange(System.String,Text2Sql.Net.Domain.Service.ConversationTurn,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            处理排序变更
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ConversationStateManager.ProcessComparison(System.String,Text2Sql.Net.Domain.Service.ConversationTurn,Text2Sql.Net.Domain.Service.ConversationContext)">
            <summary>
            处理比较查询
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ConversationContext">
            <summary>
            对话上下文
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ConversationTurn">
            <summary>
            对话轮次
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.FollowupQueryType">
            <summary>
            后续查询类型
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer">
            <summary>
            执行反馈优化器
            通过执行结果分析来优化SQL查询
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.OptimizeWithFeedbackAsync(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            基于执行反馈进行迭代优化
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <param name="initialSql">初始SQL</param>
            <param name="maxIterations">最大迭代次数</param>
            <returns>优化结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.ValidateResultAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            验证查询结果的合理性
            </summary>
            <param name="result">查询结果</param>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckResultSizeReasonableness(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            检查结果大小合理性
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckDataTypeConsistency(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            检查数据类型一致性
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckBusinessLogicConsistencyAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            检查业务逻辑一致性
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckNullHandling(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            检查空值处理
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.AnalyzeExecutionError(System.String,System.String,System.String)">
            <summary>
            分析执行错误
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.ClassifyError(System.String)">
            <summary>
            错误分类
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.GenerateFixSuggestion(System.String,System.String,System.String)">
            <summary>
            生成修复建议
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.FixSqlErrorAsync(System.String,System.String,System.String,Text2Sql.Net.Domain.Service.ErrorAnalysis)">
            <summary>
            基于错误分析修复SQL
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.RefineBasedOnResultFeedbackAsync(System.String,System.String,System.String,System.String)">
            <summary>
            基于结果反馈优化SQL
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.GenerateResultFeedback(Text2Sql.Net.Domain.Service.ValidationResult,System.String)">
            <summary>
            生成结果反馈信息
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckDescendingOrder(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            检查降序排列
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckAscendingOrder(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            检查升序排列
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CheckRecentTimeOrder(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            检查时间排序
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.FindNumericColumns(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            查找数值列
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.FindTimeColumns(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            查找时间列
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.IsNumericType(System.Type)">
            <summary>
            判断是否为数值类型
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.IsNumericTypeConversion(System.Type,System.Type)">
            <summary>
            判断是否为数值类型转换
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.ExecutionFeedbackOptimizer.CleanSqlResult(System.String)">
            <summary>
            清理SQL结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.OptimizationResult">
            <summary>
            优化结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.OptimizationStep">
            <summary>
            优化步骤
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ExecutionResultInfo">
            <summary>
            执行结果信息
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ValidationResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ErrorAnalysis">
            <summary>
            错误分析
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService">
            <summary>
            智能Schema Linking服务
            实现基于语义相似度的智能表结构匹配
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.GetRelevantSchemaAsync(System.String,System.String,System.Double,System.Int32)">
            <summary>
            智能Schema Linking - 基于语义相似度匹配
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <param name="userMessage">用户查询</param>
            <param name="relevanceThreshold">相关性阈值</param>
            <param name="maxTables">最多返回表数量</param>
            <returns>相关Schema信息</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.PerformDynamicThresholdSearch(Microsoft.SemanticKernel.Memory.SemanticTextMemory,System.String,System.String,System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo},System.Double,System.Int32)">
            <summary>
            动态阈值搜索策略
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.InferRelatedTablesAsync(System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo},System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo})">
            <summary>
            推断并添加相关联的表
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.GenerateMatchingDetailsAsync(System.String,System.Collections.Generic.List{Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo},Microsoft.SemanticKernel.Memory.SemanticTextMemory,System.String)">
            <summary>
            生成匹配详情
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.BuildSchemaGraphAsync(System.String)">
            <summary>
            基于图神经网络的Schema结构分析
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.ExtractTableFeatures(Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo)">
            <summary>
            提取表特征
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.ExtractColumnFeatures(Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo)">
            <summary>
            提取列特征
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.InferTableType(Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo)">
            <summary>
            推断表类型
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.IntelligentSchemaLinkingService.InferSemanticType(Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo)">
            <summary>
            推断语义类型
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SchemaLinkingResult">
            <summary>
            Schema Linking结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SchemaMatchDetail">
            <summary>
            Schema匹配详情
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SchemaGraph">
            <summary>
            Schema图结构
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.GraphNode">
            <summary>
            图节点
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.GraphEdge">
            <summary>
            图边
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService">
            <summary>
            监控与评估服务
            提供系统性能监控、查询质量评估和用户行为分析
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateQueryQualityAsync(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估查询质量
            </summary>
            <param name="evaluationRequest">评估请求</param>
            <returns>评估结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.RecordQueryMetricAsync(Text2Sql.Net.Domain.Service.QueryExecutionMetric)">
            <summary>
            记录查询执行指标
            </summary>
            <param name="queryMetric">查询指标</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.RecordUserBehaviorAsync(Text2Sql.Net.Domain.Service.UserBehavior)">
            <summary>
            记录用户行为
            </summary>
            <param name="userBehavior">用户行为</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GetSystemPerformanceReportAsync(Text2Sql.Net.Domain.Service.TimeRange)">
            <summary>
            获取系统性能报告
            </summary>
            <param name="timeRange">时间范围</param>
            <returns>性能报告</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GetUserBehaviorReportAsync(Text2Sql.Net.Domain.Service.TimeRange)">
            <summary>
            获取用户行为分析报告
            </summary>
            <param name="timeRange">时间范围</param>
            <returns>用户行为报告</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.CleanupExpiredDataAsync">
            <summary>
            清理过期数据
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateSyntaxAccuracy(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估语法准确性
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateSemanticAccuracyAsync(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估语义准确性
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateExecutionPerformance(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估执行性能
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateResultQuality(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估结果质量
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.EvaluateUserSatisfaction(Text2Sql.Net.Domain.Service.QueryEvaluationRequest)">
            <summary>
            评估用户满意度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.CalculateOverallScore(Text2Sql.Net.Domain.Service.QueryQualityMetrics)">
            <summary>
            计算综合评分
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GenerateImprovementSuggestions(Text2Sql.Net.Domain.Service.QueryQualityMetrics)">
            <summary>
            生成改进建议
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.CollectSystemMetrics(System.Object)">
            <summary>
            定期收集系统指标
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GetCpuUsage">
            <summary>
            获取CPU使用率（简化实现）
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GetActiveConnections">
            <summary>
            获取活跃连接数（简化实现）
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.CalculateSystemHealth(System.Collections.Generic.List{Text2Sql.Net.Domain.Service.SystemMetrics})">
            <summary>
            计算系统健康度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.AnalyzePerformanceTrend(System.Collections.Generic.List{Text2Sql.Net.Domain.Service.SystemMetrics})">
            <summary>
            分析性能趋势
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GenerateSystemAlerts(Text2Sql.Net.Domain.Service.SystemPerformanceReport)">
            <summary>
            生成系统告警
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.GetMostPopularQueryTypes(System.Collections.Generic.List{Text2Sql.Net.Domain.Service.UserBehaviorMetrics})">
            <summary>
            获取最受欢迎的查询类型
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.MonitoringAndEvaluationService.CalculateUserEngagementLevel(System.Collections.Generic.List{Text2Sql.Net.Domain.Service.UserBehaviorMetrics})">
            <summary>
            计算用户参与度
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryEvaluationRequest">
            <summary>
            查询评估请求
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryEvaluationResult">
            <summary>
            查询评估结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryQualityMetrics">
            <summary>
            查询质量指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryExecutionMetric">
            <summary>
            查询执行指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.UserBehavior">
            <summary>
            用户行为
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SystemMetrics">
            <summary>
            系统指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.UserBehaviorMetrics">
            <summary>
            用户行为指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SystemPerformanceReport">
            <summary>
            系统性能报告
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.UserBehaviorReport">
            <summary>
            用户行为报告
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SystemAlert">
            <summary>
            系统告警
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.TimeRange">
            <summary>
            时间范围
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SystemHealth">
            <summary>
            系统健康状态
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.PerformanceTrend">
            <summary>
            性能趋势
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.UserEngagementLevel">
            <summary>
            用户参与度级别
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.AlertLevel">
            <summary>
            告警级别
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.PerformanceOptimizationService">
            <summary>
            性能优化服务
            包括缓存策略、并行处理、查询复杂度分析等
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.GetCachedResultAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},Text2Sql.Net.Domain.Service.CachePolicy)">
            <summary>
            智能缓存查询结果
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="queryFunc">查询函数</param>
            <param name="cachePolicy">缓存策略</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.AnalyzeQueryComplexityAsync(System.String,System.String)">
            <summary>
            分析查询复杂度
            </summary>
            <param name="userMessage">用户查询</param>
            <param name="schemaInfo">Schema信息</param>
            <returns>复杂度分析结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.ProcessInParallelAsync``1(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task{``0}}},System.Int32)">
            <summary>
            并行处理多个查询任务
            </summary>
            <param name="tasks">任务列表</param>
            <param name="maxParallelism">最大并行度</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.GetQueryMetricsAsync(System.String)">
            <summary>
            获取查询性能指标
            </summary>
            <param name="queryId">查询ID</param>
            <returns>性能指标</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.UpdateQueryMetricsAsync(System.String,System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            更新查询性能指标
            </summary>
            <param name="queryId">查询ID</param>
            <param name="executionTime">执行时间</param>
            <param name="resultSize">结果大小</param>
            <param name="cacheHit">是否命中缓存</param>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.CleanupExpiredCacheAsync">
            <summary>
            清理过期缓存
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.GenerateCacheKey(System.String,System.Object[])">
            <summary>
            生成缓存键
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.DetermineCachePolicy``1(System.String,``0)">
            <summary>
            确定缓存策略
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.CalculateObjectSize``1(``0)">
            <summary>
            计算对象大小（简化实现）
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.CalculateBasicComplexity(System.String)">
            <summary>
            计算基础复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.EstimateTableCount(System.String,System.String)">
            <summary>
            估计表数量
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.EstimateJoinComplexity(System.String,System.Int32)">
            <summary>
            估计JOIN复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.EstimateAggregationComplexity(System.String)">
            <summary>
            估计聚合复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.EstimateSubqueryComplexity(System.String)">
            <summary>
            估计子查询复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.EstimateTemporalComplexity(System.String)">
            <summary>
            估计时间复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.CalculateOverallComplexity(Text2Sql.Net.Domain.Service.ComplexityAnalysis)">
            <summary>
            计算总体复杂度
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.DetermineProcessingStrategy(Text2Sql.Net.Domain.Service.ComplexityAnalysis)">
            <summary>
            确定处理策略
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.UpdateCacheHitMetrics(System.String)">
            <summary>
            更新缓存命中指标
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.PerformanceOptimizationService.UpdateCacheMissMetrics(System.String)">
            <summary>
            更新缓存未命中指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.CacheItemPriority">
            <summary>
            缓存优先级
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.CachePolicy">
            <summary>
            缓存策略
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.CacheItem`1">
            <summary>
            缓存项
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ComplexityAnalysis">
            <summary>
            复杂度分析结果
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.ProcessingStrategy">
            <summary>
            处理策略
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.QueryMetrics">
            <summary>
            查询性能指标
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SchemaTrainingService">
            <summary>
            Schema训练服务实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.#ctor(Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.IDatabaseConnectionConfigRepository,Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.IDatabaseSchemaRepository,Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.Memory.IMemoryStore,Microsoft.Extensions.Logging.ILogger{Text2Sql.Net.Domain.Service.SchemaTrainingService},Text2Sql.Net.Domain.Interface.ISemanticService)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.TrainDatabaseSchemaAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.TrainDatabaseSchemaAsync(System.String,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.GetDatabaseTablesAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.GetDatabaseSchemaAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.GetSqliteSchemaAsync(SqlSugar.SqlSugarClient,Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig)">
            <summary>
            获取SQLite数据库的架构信息
            </summary>
            <param name="db">数据库连接</param>
            <param name="connectionConfig">连接配置</param>
            <returns>schema JSON</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.SqliteEscapeIdentifier(System.String)">
            <summary>
            SQLite标识符转义处理
            </summary>
            <param name="identifier">需要转义的标识符</param>
            <returns>转义后的标识符</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.CreateCommentTablesIfNotExistsAsync(SqlSugar.SqlSugarClient)">
            <summary>
            为SQLite创建注释表(如果不存在)
            </summary>
            <param name="db">数据库连接</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SchemaTrainingService.GetDbType(System.String)">
            <summary>
            获取SqlSugar数据库类型
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SemanticService">
            <summary>
            语义服务实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SemanticService.#ctor(Microsoft.SemanticKernel.Kernel)">
            <summary>
            语义服务实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SemanticService.GetTextMemory">
            <summary>
            获取SemanticTextMemory
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Text2Sql.Net.Domain.Service.SqlExecutionService">
            <summary>
            SQL执行服务实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SqlExecutionService.#ctor(Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.IDatabaseConnectionConfigRepository,Microsoft.Extensions.Logging.ILogger{Text2Sql.Net.Domain.Service.SqlExecutionService})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SqlExecutionService.ExecuteQueryAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Domain.Service.SqlExecutionService.GetDbType(System.String)">
            <param name="dbTypeStr">数据库类型字符串</param>
            <returns>对应的SqlSugar数据库类型</returns>
        </member>
        <member name="P:Text2Sql.Net.Model.PageList`1.PageIndex">
            <summary>
            当前页，从1开始
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Model.PageList`1.PageSize">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Model.PageList`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetList">
            <summary>
            获取所有list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetListAsync">
            <summary>
            获取所有list-异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetPageListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页-异步
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetById(System.Object)">
            <summary>
            根据id获取实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetByIdAsync(System.Object)">
            <summary>
            根据id获取实体-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象-异步  （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 --异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Insert(`0)">
            <summary>
            实体插入
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertAsync(`0)">
            <summary>
            实体插入-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertRange(System.Collections.Generic.List{`0})">
            <summary>
            批量插入
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量插入-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertReturnIdentity(`0)">
            <summary>
            插入返回自增列
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            插入返回自增列-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertReturnBigIdentity(`0)">
            <summary>
            插入返回longid
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertReturnBigIdentityAsync(`0)">
            <summary>
            插入返回longid-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.DeleteByIds(System.Object[])">
            <summary>
            批量删除
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.DeleteByIdsAsync(System.Object[])">
            <summary>
            批量删除-异步
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Delete(System.Object)">
            <summary>
            根据主键删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.DeleteAsync(System.Object)">
            <summary>
            根据主键删除-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Delete(`0)">
            <summary>
            根据实体删除
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.DeleteAsync(`0)">
            <summary>
            根据实体删除-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.UpdateAsync(`0)">
            <summary>
            更新-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.UpdateRange(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertOrUpdate(`0)">
            <summary>
            新增或修改
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.InsertOrUpdateAsync(`0)">
            <summary>
            新增或修改-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.UpdateRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量更新-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.IsAny(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.Repository`1.IsAnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Base.SqlSugarHelper.SqlScope">
            <summary>
            sqlserver连接
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage">
            <summary>
            聊天消息实体
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.Id">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.ConnectionId">
            <summary>
            数据库连接ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.IsUser">
            <summary>
            是否为用户消息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.SqlQuery">
            <summary>
            SQL查询语句（仅AI响应消息）
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.ExecutionError">
            <summary>
            执行错误信息（仅AI响应消息）
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage.QueryResult">
            <summary>
            查询结果（非持久化）
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessageRepository">
            <summary>
            聊天消息仓储实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessageRepository.GetByConnectionIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessageRepository.InsertAsync(Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.IChatMessageRepository">
            <summary>
            聊天消息仓储接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.IChatMessageRepository.GetByConnectionIdAsync(System.String)">
            <summary>
            获取指定连接的聊天历史
            </summary>
            <param name="connectionId">数据库连接ID</param>
            <returns>聊天消息列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.ChatHistory.IChatMessageRepository.InsertAsync(Text2Sql.Net.Repositories.Text2Sql.ChatHistory.ChatMessage)">
            <summary>
            添加聊天消息
            </summary>
            <param name="chatMessage">聊天消息</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Id">
            <summary>
            配置ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Name">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.DbType">
            <summary>
            数据库类型简称 (兼容现有代码)
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Server">
            <summary>
            数据库服务器地址
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Database">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfig.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.DatabaseConnectionConfigRepository">
            <summary>
            数据库连接配置仓储实现类
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseConnection.IDatabaseConnectionConfigRepository">
            <summary>
            数据库连接配置仓储接口
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema">
            <summary>
            数据库Schema信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema.Id">
            <summary>
            Schema ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema.ConnectionId">
            <summary>
            数据库连接ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema.SchemaContent">
            <summary>
            表和列信息的JSON字符串
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchema.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo">
            <summary>
            数据库表信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo.Description">
            <summary>
            表描述
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo.Columns">
            <summary>
            列信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.TableInfo.ForeignKeys">
            <summary>
            外键关系
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo">
            <summary>
            数据库列信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo.IsNullable">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ColumnInfo.Description">
            <summary>
            列描述
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo">
            <summary>
            外键关系信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo.ForeignKeyName">
            <summary>
            外键名称
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo.ColumnName">
            <summary>
            外键列名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo.ReferencedTableName">
            <summary>
            引用的表名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo.ReferencedColumnName">
            <summary>
            引用的列名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.ForeignKeyInfo.RelationshipDescription">
            <summary>
            关系描述（一对多、一对一等）
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchemaRepository">
            <summary>
            数据库Schema仓储实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.DatabaseSchemaRepository.GetByConnectionIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.IDatabaseSchemaRepository">
            <summary>
            数据库Schema仓储接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.DatabaseSchema.IDatabaseSchemaRepository.GetByConnectionIdAsync(System.String)">
            <summary>
            根据连接ID获取Schema
            </summary>
            <param name="connectionId">连接ID</param>
            <returns>Schema对象</returns>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository">
            <summary>
            Schema向量嵌入仓储接口
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository.GetByConnectionIdAsync(System.String)">
            <summary>
            根据连接ID获取所有嵌入
            </summary>
            <param name="connectionId">连接ID</param>
            <returns>嵌入列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository.GetByTableAsync(System.String,System.String)">
            <summary>
            根据连接ID和表名获取嵌入
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="tableName">表名</param>
            <returns>嵌入列表</returns>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository.DeleteByConnectionIdAsync(System.String)">
            <summary>
            删除指定连接ID的所有嵌入
            </summary>
            <param name="connectionId">连接ID</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.ISchemaEmbeddingRepository.DeleteByTableNameAsync(System.String,System.String)">
            <summary>
            删除指定连接ID和表名的嵌入
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="tableName">表名</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding">
            <summary>
            Schema向量嵌入
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.Id">
            <summary>
            嵌入ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.ConnectionId">
            <summary>
            数据库连接ID
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.Vector">
            <summary>
            向量数据（JSON格式）
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbedding.EmbeddingType">
            <summary>
            向量类型（表/列/关系等）
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.EmbeddingType">
            <summary>
            嵌入类型枚举
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.EmbeddingType.Table">
            <summary>
            表信息嵌入
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.EmbeddingType.Column">
            <summary>
            列信息嵌入
            </summary>
        </member>
        <member name="F:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.EmbeddingType.Relation">
            <summary>
            表关系嵌入
            </summary>
        </member>
        <member name="T:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbeddingRepository">
            <summary>
            Schema向量嵌入仓储实现
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbeddingRepository.GetByConnectionIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbeddingRepository.GetByTableAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbeddingRepository.DeleteByConnectionIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Repositories.Text2Sql.SchemaEmbedding.SchemaEmbeddingRepository.DeleteByTableNameAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.IsNull(System.Object)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.IsNotNull(System.Object)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.IsNull(System.String)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToString(System.Object)">
            <summary>
            将obj类型转换为string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToInt32(System.Object)">
            <summary>
            object 转int32
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToInt64(System.Object)">
            <summary>
            object 转int32
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToDouble(System.Object)">
            <summary>
            将字符串转double
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToDateTime(System.String)">
            <summary>
            转换为datetime类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToDateTime(System.String,System.String)">
            <summary>
            转换为datetime类型的格式字符串
            </summary>
            <param name="s">要转换的对象</param>
            <param name="y">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ConvertToDecimal(System.Object)">
            <summary>
            将字符串转换成decimal
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.DecimalFraction(System.Decimal)">
            <summary>
            decimal保留2位小数
            </summary>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ReplaceHtml(System.String)">
            <summary>
            替换html种的特殊字符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.StreamToByte(System.IO.Stream)">
            <summary>
            流转byte
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            json参数转化querystring参数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.ComparisonIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写匹配
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.IsStream(System.String)">
            <summary>
            是否为流式请求
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.ConvertUtils.Unescape(System.String)">
            <summary>
            \uxxxx转中文,保留换行符号
            </summary>
            <param name="unicodeString"></param>
            <returns></returns>
        </member>
        <member name="M:Text2Sql.Net.Utils.RepoFiles.SamplePluginsPath">
            <summary>
            Scan the local folders from the repo, looking for "samples/plugins" folder.
            </summary>
            <returns>The full path to samples/plugins</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            容器扩展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddText2SqlNet(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.SemanticKernel.Kernel)">
            <summary>
            从程序集中加载类型并添加到容器中
            </summary>
            <param name="services">容器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.InitSK(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.SemanticKernel.Kernel)">
            <summary>
            初始化SK
            </summary>
            <param name="services"></param>
            <param name="_kernel">可以提供自定义Kernel</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.CodeFirst">
            <summary>
            初始化DB
            </summary>
        </member>
    </members>
</doc>
